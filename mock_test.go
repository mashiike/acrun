// Code generated by MockGen. DO NOT EDIT.
// Source: aws.go
//
// Generated by this command:
//
//	mockgen -source=aws.go -destination=./mock_test.go -package=acrun
//

// Package acrun is a generated GoMock package.
package acrun

import (
	context "context"
	reflect "reflect"

	bedrockagentcore "github.com/aws/aws-sdk-go-v2/service/bedrockagentcore"
	bedrockagentcorecontrol "github.com/aws/aws-sdk-go-v2/service/bedrockagentcorecontrol"
	ecr "github.com/aws/aws-sdk-go-v2/service/ecr"
	sts "github.com/aws/aws-sdk-go-v2/service/sts"
	gomock "go.uber.org/mock/gomock"
)

// MockBedrockAgentCoreControlClient is a mock of BedrockAgentCoreControlClient interface.
type MockBedrockAgentCoreControlClient struct {
	ctrl     *gomock.Controller
	recorder *MockBedrockAgentCoreControlClientMockRecorder
	isgomock struct{}
}

// MockBedrockAgentCoreControlClientMockRecorder is the mock recorder for MockBedrockAgentCoreControlClient.
type MockBedrockAgentCoreControlClientMockRecorder struct {
	mock *MockBedrockAgentCoreControlClient
}

// NewMockBedrockAgentCoreControlClient creates a new mock instance.
func NewMockBedrockAgentCoreControlClient(ctrl *gomock.Controller) *MockBedrockAgentCoreControlClient {
	mock := &MockBedrockAgentCoreControlClient{ctrl: ctrl}
	mock.recorder = &MockBedrockAgentCoreControlClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBedrockAgentCoreControlClient) EXPECT() *MockBedrockAgentCoreControlClientMockRecorder {
	return m.recorder
}

// CreateAgentRuntime mocks base method.
func (m *MockBedrockAgentCoreControlClient) CreateAgentRuntime(ctx context.Context, params *bedrockagentcorecontrol.CreateAgentRuntimeInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateAgentRuntimeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAgentRuntime", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.CreateAgentRuntimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentRuntime indicates an expected call of CreateAgentRuntime.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) CreateAgentRuntime(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentRuntime", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).CreateAgentRuntime), varargs...)
}

// CreateAgentRuntimeEndpoint mocks base method.
func (m *MockBedrockAgentCoreControlClient) CreateAgentRuntimeEndpoint(ctx context.Context, params *bedrockagentcorecontrol.CreateAgentRuntimeEndpointInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.CreateAgentRuntimeEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "CreateAgentRuntimeEndpoint", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.CreateAgentRuntimeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateAgentRuntimeEndpoint indicates an expected call of CreateAgentRuntimeEndpoint.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) CreateAgentRuntimeEndpoint(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateAgentRuntimeEndpoint", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).CreateAgentRuntimeEndpoint), varargs...)
}

// DeleteAgentRuntime mocks base method.
func (m *MockBedrockAgentCoreControlClient) DeleteAgentRuntime(ctx context.Context, params *bedrockagentcorecontrol.DeleteAgentRuntimeInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.DeleteAgentRuntimeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DeleteAgentRuntime", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.DeleteAgentRuntimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DeleteAgentRuntime indicates an expected call of DeleteAgentRuntime.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) DeleteAgentRuntime(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAgentRuntime", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).DeleteAgentRuntime), varargs...)
}

// GetAgentRuntime mocks base method.
func (m *MockBedrockAgentCoreControlClient) GetAgentRuntime(ctx context.Context, params *bedrockagentcorecontrol.GetAgentRuntimeInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetAgentRuntimeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentRuntime", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.GetAgentRuntimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentRuntime indicates an expected call of GetAgentRuntime.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) GetAgentRuntime(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentRuntime", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).GetAgentRuntime), varargs...)
}

// GetAgentRuntimeEndpoint mocks base method.
func (m *MockBedrockAgentCoreControlClient) GetAgentRuntimeEndpoint(ctx context.Context, params *bedrockagentcorecontrol.GetAgentRuntimeEndpointInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.GetAgentRuntimeEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetAgentRuntimeEndpoint", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.GetAgentRuntimeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAgentRuntimeEndpoint indicates an expected call of GetAgentRuntimeEndpoint.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) GetAgentRuntimeEndpoint(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAgentRuntimeEndpoint", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).GetAgentRuntimeEndpoint), varargs...)
}

// ListAgentRuntimeEndpoints mocks base method.
func (m *MockBedrockAgentCoreControlClient) ListAgentRuntimeEndpoints(ctx context.Context, params *bedrockagentcorecontrol.ListAgentRuntimeEndpointsInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListAgentRuntimeEndpointsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentRuntimeEndpoints", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.ListAgentRuntimeEndpointsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentRuntimeEndpoints indicates an expected call of ListAgentRuntimeEndpoints.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) ListAgentRuntimeEndpoints(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentRuntimeEndpoints", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).ListAgentRuntimeEndpoints), varargs...)
}

// ListAgentRuntimeVersions mocks base method.
func (m *MockBedrockAgentCoreControlClient) ListAgentRuntimeVersions(ctx context.Context, params *bedrockagentcorecontrol.ListAgentRuntimeVersionsInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListAgentRuntimeVersionsOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentRuntimeVersions", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.ListAgentRuntimeVersionsOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentRuntimeVersions indicates an expected call of ListAgentRuntimeVersions.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) ListAgentRuntimeVersions(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentRuntimeVersions", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).ListAgentRuntimeVersions), varargs...)
}

// ListAgentRuntimes mocks base method.
func (m *MockBedrockAgentCoreControlClient) ListAgentRuntimes(ctx context.Context, params *bedrockagentcorecontrol.ListAgentRuntimesInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.ListAgentRuntimesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "ListAgentRuntimes", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.ListAgentRuntimesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListAgentRuntimes indicates an expected call of ListAgentRuntimes.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) ListAgentRuntimes(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListAgentRuntimes", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).ListAgentRuntimes), varargs...)
}

// UpdateAgentRuntime mocks base method.
func (m *MockBedrockAgentCoreControlClient) UpdateAgentRuntime(ctx context.Context, params *bedrockagentcorecontrol.UpdateAgentRuntimeInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateAgentRuntimeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAgentRuntime", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.UpdateAgentRuntimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentRuntime indicates an expected call of UpdateAgentRuntime.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) UpdateAgentRuntime(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentRuntime", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).UpdateAgentRuntime), varargs...)
}

// UpdateAgentRuntimeEndpoint mocks base method.
func (m *MockBedrockAgentCoreControlClient) UpdateAgentRuntimeEndpoint(ctx context.Context, params *bedrockagentcorecontrol.UpdateAgentRuntimeEndpointInput, optFns ...func(*bedrockagentcorecontrol.Options)) (*bedrockagentcorecontrol.UpdateAgentRuntimeEndpointOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "UpdateAgentRuntimeEndpoint", varargs...)
	ret0, _ := ret[0].(*bedrockagentcorecontrol.UpdateAgentRuntimeEndpointOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// UpdateAgentRuntimeEndpoint indicates an expected call of UpdateAgentRuntimeEndpoint.
func (mr *MockBedrockAgentCoreControlClientMockRecorder) UpdateAgentRuntimeEndpoint(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateAgentRuntimeEndpoint", reflect.TypeOf((*MockBedrockAgentCoreControlClient)(nil).UpdateAgentRuntimeEndpoint), varargs...)
}

// MockBedrockAgentCoreClient is a mock of BedrockAgentCoreClient interface.
type MockBedrockAgentCoreClient struct {
	ctrl     *gomock.Controller
	recorder *MockBedrockAgentCoreClientMockRecorder
	isgomock struct{}
}

// MockBedrockAgentCoreClientMockRecorder is the mock recorder for MockBedrockAgentCoreClient.
type MockBedrockAgentCoreClientMockRecorder struct {
	mock *MockBedrockAgentCoreClient
}

// NewMockBedrockAgentCoreClient creates a new mock instance.
func NewMockBedrockAgentCoreClient(ctrl *gomock.Controller) *MockBedrockAgentCoreClient {
	mock := &MockBedrockAgentCoreClient{ctrl: ctrl}
	mock.recorder = &MockBedrockAgentCoreClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockBedrockAgentCoreClient) EXPECT() *MockBedrockAgentCoreClientMockRecorder {
	return m.recorder
}

// InvokeAgentRuntime mocks base method.
func (m *MockBedrockAgentCoreClient) InvokeAgentRuntime(ctx context.Context, params *bedrockagentcore.InvokeAgentRuntimeInput, optFns ...func(*bedrockagentcore.Options)) (*bedrockagentcore.InvokeAgentRuntimeOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "InvokeAgentRuntime", varargs...)
	ret0, _ := ret[0].(*bedrockagentcore.InvokeAgentRuntimeOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InvokeAgentRuntime indicates an expected call of InvokeAgentRuntime.
func (mr *MockBedrockAgentCoreClientMockRecorder) InvokeAgentRuntime(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InvokeAgentRuntime", reflect.TypeOf((*MockBedrockAgentCoreClient)(nil).InvokeAgentRuntime), varargs...)
}

// MockECRClient is a mock of ECRClient interface.
type MockECRClient struct {
	ctrl     *gomock.Controller
	recorder *MockECRClientMockRecorder
	isgomock struct{}
}

// MockECRClientMockRecorder is the mock recorder for MockECRClient.
type MockECRClientMockRecorder struct {
	mock *MockECRClient
}

// NewMockECRClient creates a new mock instance.
func NewMockECRClient(ctrl *gomock.Controller) *MockECRClient {
	mock := &MockECRClient{ctrl: ctrl}
	mock.recorder = &MockECRClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockECRClient) EXPECT() *MockECRClientMockRecorder {
	return m.recorder
}

// DescribeRepositories mocks base method.
func (m *MockECRClient) DescribeRepositories(ctx context.Context, params *ecr.DescribeRepositoriesInput, optFns ...func(*ecr.Options)) (*ecr.DescribeRepositoriesOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "DescribeRepositories", varargs...)
	ret0, _ := ret[0].(*ecr.DescribeRepositoriesOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// DescribeRepositories indicates an expected call of DescribeRepositories.
func (mr *MockECRClientMockRecorder) DescribeRepositories(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DescribeRepositories", reflect.TypeOf((*MockECRClient)(nil).DescribeRepositories), varargs...)
}

// MockSTSClient is a mock of STSClient interface.
type MockSTSClient struct {
	ctrl     *gomock.Controller
	recorder *MockSTSClientMockRecorder
	isgomock struct{}
}

// MockSTSClientMockRecorder is the mock recorder for MockSTSClient.
type MockSTSClientMockRecorder struct {
	mock *MockSTSClient
}

// NewMockSTSClient creates a new mock instance.
func NewMockSTSClient(ctrl *gomock.Controller) *MockSTSClient {
	mock := &MockSTSClient{ctrl: ctrl}
	mock.recorder = &MockSTSClientMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockSTSClient) EXPECT() *MockSTSClientMockRecorder {
	return m.recorder
}

// GetCallerIdentity mocks base method.
func (m *MockSTSClient) GetCallerIdentity(ctx context.Context, params *sts.GetCallerIdentityInput, optFns ...func(*sts.Options)) (*sts.GetCallerIdentityOutput, error) {
	m.ctrl.T.Helper()
	varargs := []any{ctx, params}
	for _, a := range optFns {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "GetCallerIdentity", varargs...)
	ret0, _ := ret[0].(*sts.GetCallerIdentityOutput)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetCallerIdentity indicates an expected call of GetCallerIdentity.
func (mr *MockSTSClientMockRecorder) GetCallerIdentity(ctx, params any, optFns ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{ctx, params}, optFns...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetCallerIdentity", reflect.TypeOf((*MockSTSClient)(nil).GetCallerIdentity), varargs...)
}
